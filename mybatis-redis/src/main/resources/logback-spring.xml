<?xml version="1.0" encoding="UTF-8"?>
<configuration>


    <springProperty scope="context" name="springAppName" source="spring.application.name"/>

    <include resource="org/springframework/boot/logging/logback/defaults.xml" />



    <property name="LOG_FILE_PATH" value="../logs/${springAppName}"/>

    <!--输出到控制台 ConsoleAppender-->
    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- Minimum logging level to be presented in the console logs-->
            <level>DEBUG</level>
        </filter>
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <!--输出到文件 RollingFileAppender-->
    <appender name="fileLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
        <!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
            <!--<level>Error</level>-->
        <!--</filter>-->
        <!--日志名称，file 属性，那么只会使用fileNamePattern的文件路径规则
            如果同时有<file>和<fileNamePattern>，那么当天日志是<file>，明天会自动把今天
            的日志改名为今天的日期。即，<file> 的日志都是当天的。
        -->
        <file>${LOG_FILE_PATH}.log</file>
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--TimeBasedRollingPolicy 文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <!--<fileNamePattern>${LOG_FILE_PATH}.%d{yyyy-MM-dd}.log</FileNamePattern>-->
            <!--TimeBasedRollingPolicy 文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 %i表示一个文件的多个部分  相当于旧日志归档-->
            <fileNamePattern>${LOG_FILE_PATH}.%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
            <!--只保留最近7天的日志-->
            <maxHistory>7</maxHistory>
            <!--定义单个日志文件大小-->
            <maxFileSize>100MB</maxFileSize>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>



  <!--多个环境用，隔开 -->
    <springProfile name="dev,test">
        <root level="INFO">
            <appender-ref ref="consoleLog"/>
            <appender-ref ref="fileLog"/>
        </root>

    </springProfile>

    <springProfile name="prod">

        <root level="INFO">
            <appender-ref ref="consoleLog"/>
        </root>
    </springProfile>




<!--    logback的additivity="false" 与root关系  addtivity:是否向上级loger传递打印信息。默认是true。-->
<!--    它是 子Logger 是否继承 root的Logger 的 输出源（appender） 的标志位。-->

<!--    具体说，默认情况下子Logger会继承root的Logger的appender，也就是说子Logger会在root的Logger的appender里输出。 logger里面不写appender本身不会打印任务日志-->


<!--    1.若是additivity设为false，则子Logger只会在自己的appender里输出，不会在root的logger的appender里输出（个人可以理解为additivity设为false后，子Logger会覆盖掉root的logger）。-->

<!--    2.若是additivity设为true，则子Logger不止会在自己的appender里输出，还会在root的logger的appender里输出-->


    <logger name="com.bryan.mapper" level="DEBUG" additivity="false">
        <appender-ref ref="consoleLog" />
        <appender-ref ref="fileLog" />
    </logger>

    <logger name="com.bryan.LogIntercepter" level="DEBUG" additivity="false">
        <appender-ref ref="consoleLog" />
        <appender-ref ref="fileLog" />
    </logger>

    <logger name="com.bryan.GlobalExceptionHandler" level="DEBUG" additivity="false">
        <appender-ref ref="consoleLog" />
        <appender-ref ref="fileLog" />
    </logger>

    <logger name="com.bryan.LogFilter" level="DEBUG" additivity="false">
        <appender-ref ref="consoleLog" />
        <appender-ref ref="fileLog" />
    </logger>



</configuration>

